# 載入需要的模組
from __future__ import unicode_literals
import os
import psycopg2
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage, ImageSendMessage

app = Flask(__name__)


# LINE 聊天機器人的基本資料
line_bot_api = LineBotApi('dyI7Q/RmoDzWLFn2M9lz4gpPddbYiv5Wn+l1Ni83uZ853LewMq+Hvnz7ivUWur4thlME+rJCTCVlTaRrAHH7NkAq2C9RBVrTWpdLoC1Pnutmg5zOmrQBSyKp3HQ/f6ljJTDH3ZImchY+7GRCzBezggdB04t89/1O/w1cDnyilFU=')
handler = WebhookHandler('b5b98f3801c87bec347bf6a1e0c2ba95')

# 接收 LINE 的資訊
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']

    body = request.get_data(as_text=True)
    app.logger.info("Request body: " + body)

    print(body)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return 'OK'

# 學你說話
@handler.add(MessageEvent, message=TextMessage)
def echo(event):
    
     if event.source.user_id != "Udeadbeefdeadbeefdeadbeefdeadbeef":
        Hi_code = b'\xe4\xbd\xa0\xe5\xa5\xbd'
        morning_code = b'\xe6\x97\xa9\xe5\xae\x89'

        #連結到heroku資料庫
        DATABASE_URL = os.environ['DATABASE_URL']
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        cursor = conn.cursor()
        
        if event.message.text == "~open":
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text='please answer the questions\ntell me the activity type')
            )
            print("prepare to open the group")

            #把只創建卻沒有寫入資料的列刪除
            postgres_delete_query = f"""DELETE FROM group_data WHERE (condition) = ('initial');"""
            cursor.execute(postgres_delete_query)
            conn.commit()
            
            #創建一列(condition = initial)
            postgres_insert_query = f"""INSERT INTO group_data (condition) VALUES ('initial');"""
            cursor.execute(postgres_insert_query)
            conn.commit()

            cursor.close()
            conn.close()

        #如果有創建了一列, 則接下來的資料繼續寫入
        else:
            postgres_select_query = f"""SELECT * FROM group_data WHERE condition = 'initial';"""
            cursor.execute(postgres_select_query)
            data = cursor.fetchone()

            column_all = ['record_no', 'activity_type', 'activity_name', 'activity_time', 'location', 'people', 'cost', 'due_time', 'description', 'photo', 'your_name', 'your_phone', 'your_mail', 'condition']

            if data:
                
                if None in data:
                    i = data.index(None)
                    
                    record = event.message.text
                    #如果使用者輸入的資料不符合資料庫的資料型態, 則輸入N/A
                    if event.message.type == 'text':
                        postgres_update_query = f"""UPDATE group_data SET {column_all[i]} = '{record}' WHERE condition = 'initial';"""
                        cursor.execute(postgres_update_query)
                        conn.commit()
                    else:
                        postgres_update_query = f"""UPDATE group_data SET {column_all[i]} = 'N/A' WHERE condition = 'initial';"""
                        cursor.execute(postgres_update_query)
                        conn.commit()
                    
                   #如果還沒輸入到最後一格, 則繼續詢問下一題
                    postgres_select_query = f"""SELECT * FROM group_data WHERE condition = 'initial';"""
                    cursor.execute(postgres_select_query)
                    data = cursor.fetchone()
                
                    if None in data:        
                        line_bot_api.reply_message(
                            event.reply_token,
                            TextSendMessage(text= f'tell me the {column_all[i+1]}')
                        )

                    #如果已經到最後一格, condition改為finish, 回覆summary，
                    elif None not in data:
                        
                        postgres_select_query = f"""SELECT * FROM group_data ORDER BY record_no DESC;"""
                        cursor.execute(postgres_select_query)
                        data = cursor.fetchone()
    
                        summary_lst = []
                        for j in range(1,len(data)-1):
                            summary_lst.append(f"{column_all[j]}:{data[j]}")
                        summary = "\n".join(summary_lst)+"\n\nIf all infomation is correct, please enter [correct], otherwise please enter the column you want to edit"
                    
                        line_bot_api.reply_message(
                            event.reply_token,
                            TextSendMessage(text=summary)
                        )
  
                else:
                    if event.message.text == 'correct':

                        postgres_update_query = f"""UPDATE group_data SET condition = 'finish' WHERE condition = 'initial';"""
                        cursor.execute(postgres_update_query)
                        conn.commit()

                        line_bot_api.reply_message(
                            event.reply_token,
                            TextSendMessage(text="finish!!")
                        )

                        cursor.close()
                        conn.close()
                        
                    else:
                        column = event.message.text
                        if column in column_all:
                            postgres_update_query = f"""UPDATE group_data SET {column} = Null WHERE condition = 'initial';"""
                            cursor.execute(postgres_update_query)
                            conn.commit()

                            line_bot_api.reply_message(
                                event.reply_token,
                                TextSendMessage(text= f'tell me the {column}')
                            )
                        else :
                            line_bot_api.reply_message(
                                event.reply_token,
                                TextSendMessage(text= 'please enter the column you want to edit')
                            )

            else:

                if event.message.text.encode('utf-8') == Hi_code:
                    line_bot_api.reply_message(
                        event.reply_token,
                        TextSendMessage(text=b'\xe5\x8a\xa0\xe6\xb2\xb9!!'.decode('utf-8'))
                    )

                elif event.message.text.encode('utf-8') == morning_code:
                    img = 'https://pic.pimg.tw/ellenlee0409/1566550498-3560465550.jpg'
                    line_bot_api.reply_message(
                        event.reply_token,
                        ImageSendMessage(original_content_url=img ,preview_image_url=img)
                    )
            
                else:    
                    line_bot_api.reply_message(
                        event.reply_token,
                        TextSendMessage(text=event.message.text)
                    )
            
if __name__ == "__main__":
    app.run()
